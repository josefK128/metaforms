{

    // --------------------------------------------------------------------
    // JSHint Configuration, variation on Strict Edition
    // (minor variations given by NOTE!!/(*) - rudolph)
    // --------------------------------------------------------------------
    //
    // This is a variation on the options template for [JSHint][1], using 
    // [JSHint example][2] and [Ory Band's example][3] as basis 
    // [1]: http://www.jshint.com/
    // [2]: https://github.com/jshint/node-jshint/blob/master/example/config.json
    // [3]: https://github.com/oryband/dotfiles/blob/master/jshintrc
    // @author http://michael.haschke.biz/
    // @license http://unlicense.org/
    //
    // generally sets config values to be most strict:
    // * sets all/most enforcing options to true
    // * sets all/most relaxing options to false
    // * sets all environment options to false, except the browser value
    // * sets all JSLint legacy options to false

    // == Enforcing Options ===============================================
    // These options tell JSHint to be more strict towards your code. Use
    // them if you want to allow only a safe subset of JavaScript
    // NOTE!! remove enforcement for <nothing>
    "bitwise"       : true,     // Prohibit bitwise operators (&, |, ^, etc.).
    "curly"         : true,     // Require {} for every new block or scope.
    "eqeqeq"        : true,     // Require triple equals i.e. `===`.
    "forin"         : true,     // Tolerate `for in` loops without 
                                // `hasOwnPrototype`.
    "immed"         : true,     // Require immediate invocations to be wrapped 
                                // in parens 
                                //   e.g. `( function(){}() );`
    "latedef"       : true,     // Prohibit variable use before definition.
    "newcap"        : true,     // Require capitalization of all constructor 
                                // functions e.g. `new F()`.
                                // However prefer Object.create(prototype, {})
    "noarg"         : true,     // Prohibit use of `arguments.caller` 
                                // and `arguments.callee`.
    "noempty"       : true,     // Prohibit use of empty blocks. (why?)
    "nonew"         : true,     // Prohibit use of constructors for side-effects
    "plusplus"      : false,    // Prohibit use of `++` & `--`.
    "regexp"        : true,     // Prohibit `.` and `[^...]` in regular 
                                // expressions. (why?)
    "undef"         : true,     // Require all non-global variables be declared
                                // before they are used.
    "strict"        : "func",     // Require `use strict` pragma in every file.
    "trailing"      : true,     // Prohibit trailing whitespaces.
    
    // == Relaxing Options ================================================
    // These options allow you to suppress certain types of warnings. Use
    // them only if you are absolutely positive that you know what you are
    // doing.
    // NOTE!! allow <"sub">
    "asi"           : false,    // Tolerate Automatic Semicolon Insertion (when
                                // no semicolon given).
    "boss"          : false,    // Tolerate assignments inside if, for & while.
                                // Assume equals in conditions & loops are for 
                                // comparison not assignment.
    "debug"         : false,    // Allow debugger statements e.g. browser breakpoints.
    "eqnull"        : false,    // Tolerate use of `== null`.
    //"esversion"     : 5,       // (*) Now default
    "esnext"        : true,    // Allow ES.next specific features such as 
                                // `const` and `let` - seems 'let' is not
                                // supported
    "evil"          : false,    // Tolerate use of `eval`.
    "expr"          : false,    // Tolerate `ExpressionStatement` as Programs.
    "funcscope"     : false,    // Tolerate declarations of variables inside of
                                // control structures while accessing them 
                                // later from the outside.
    "globalstrict"  : false,    // Allow global "use strict" (also enables 
                                // 'strict'). Keep module-scope 'use strict'
    "iterator"      : false,    // Allow usage of __iterator__ property.
    "lastsemic"     : false,    // Tolerate missing semicolons when they are
                                // omitted as last statement in one-line block.
    "laxbreak"      : false,    // Tolerate unsafe line breaks 
                                // e.g. `return [\n] x` without semicolons.
    "laxcomma"      : true,     // Suppress warnings about comma-first coding
                                // style. (well, OK) Rudolph - made true to
                                // accomodate some auto-generated e2e_spec code
    "loopfunc"      : false,    // Allow functions to be defined within loops.
    "multistr"      : true,     // Tolerate multi-line strings.
    "onecase"       : false,    // Tolerate switches with just one case.
    "proto"         : true,     // Tolerate __proto__ property. 
                                // This property is deprecated. No - it is used
                                // in ES6 enhanced object literals!
    "regexdash"     : false,    // Tolerate unescaped last dash i.e. `[-...]`.
    "scripturl"     : false,    // Tolerate script-targeted URLs.
    "smarttabs"     : false,    // Tolerate mixed tabs and spaces when tabs are
                                // used for alignmnent only. (hate tabs)
    "shadow"        : false,    // suppresses warnings about declaring a 
                                // variable already declared in outer scope
    "sub"           : true,     // (*) Tolerates use of property-name notation 
                                // e.g. `dict['key']` instead of `dict.key`.
                                // (of course!)
    "supernew"      : false,    // Tolerate `new function () { ... };` and 
                                // `new Object;`.
    "validthis"     : false,    // Tolerate strict violations when the code 
                                // is running in strict mode and you use 'this'
                                // in a non-constructor function.
    
    // == Environments ====================================================
    // These options pre-define global variables that are exposed by
    // popular JavaScript libraries and runtime environments such as
    // browser or node.js.
    // NOTE!! allow <"browser" "devel" "jquery" "node">
    "browser"       : true,     // (*) browser globals - `window`, `document`
    "couch"         : false,    // Enable globals exposed by CouchDB.
    "devel"         : true,     // (*) Allow dev-exprs e.g. `console.log();`.
    "dojo"          : false,    // Enable globals exposed by Dojo Toolkit.
    "jquery"        : true,     // Enable globals exposed by jQuery library.
    "mootools"      : false,    // Enable globals exposed by MooTools framework.
    "node"          : true,     // (*) Enable globals available when code is 
                                // running inside of the NodeJS environment.
    "nonstandard"   : false,    // Define non-standard but widely adopted 
                                // globals such as escape and unescape.
    "prototypejs"   : false,    // Enable globals used by Prototype framework.
    "rhino"         : false,    // Enable globals available when your code is 
                                // running inside of Rhino runtime environment.
    "wsh"           : false,    // Enable globals available when your code is 
                                // running in the Windows Script Host.
    
    // == JSLint Legacy ===================================================
    //
    // These options are legacy from JSLint. Aside from bug fixes they will
    // not be improved in any way and might be removed at any point.
     // NOTE!! allow <nothing>
    "nomen"         : false,    // Prohibit use of initial or trailing underbars in names.
    "onevar"        : false,    // Allow only one `var` statement per function.
    "passfail"      : false,    // Stop on first error.
    "white"         : false,    // Check against strict whitespace and indentation rules.
    
    // == Undocumented Options ============================================
    // While I've found these options in [example1][2] and [example2][3]
    // they are not described in the [JSHint Options documentation][4].
    //
    // [4]: http://www.jshint.com/options/
    "maxerr"        : 100,      // Maximum errors before stopping.
    "predef"        : [         // Extra globals. (?!)
        //"exampleVar",
        //"anotherCoolGlobal",
        //"iLoveDouglas"
    ],
    "indent"        : 2,         // Specify indentation spacing - (was 4)
    "maxlen"        : 180       
}
